(function () {
    'use strict';

    angular.module('pmajs.services.appService', ['pmajs'])
        .factory('appService', ['$rootScope',
            function ($rootScope) {

                var service = this;
                var serviceData = {};

                service.clearData = clearData;
                service.setApiDocs = setApiDocs; //swagger JSON
                service.setLocalApiDocs = setLocalApiDocs; //swagger JSON

                service.getFrameworks = getFrameworks;
                service.setFramework = setFramework;
                service.getFramework = getFramework;

                service.getApiDocs = getApiDocs; //swagger JSON

                service.getApiDocsModels = getApiDocsModels; //parseMapper JSON
                service.getLocalApiDocsModels = getLocalApiDocsModels; //parseMapper JSON

                service.getApiDocsModelsData = getApiDocsModelsData; //parseMapper JSON
                service.getLocalApiDocsModelsData = getLocalApiDocsModelsData; //parseMapper JSON

                return service;


                // implementations
                function clearData() {
                    serviceData = {};
                }

                function getApiDocs() {
                    return serviceData.apiDocs;
                }

                function setApiDocs(itemApiDocs) {
                    serviceData.apiDocs = itemApiDocs;
                }

                function setLocalApiDocs(itemApiDocs) {
                    serviceData.localApiDocs = itemApiDocs;
                }

                function getFrameworks() {
                    return [
                        {
                            id: 'angular_v1',
                            name: 'AngularJS 1'
                        },
                        {
                            id: 'angular_v2',
                            name: 'Angular 2'
                        }
                    ];
                }

                function setFramework(itemFramework) {
                    serviceData.framework = itemFramework;
                }

                function getFramework() {
                    return serviceData.framework;
                }

                function getApiDocsModels() {
                    return processApiDocsModels(serviceData.apiDocs);
                }

                function getLocalApiDocsModels() {
                    return processApiDocsModels(serviceData.localApiDocs);
                }

                function getApiDocsModelsData() {
                    return processApiDocsData(serviceData.apiDocs);
                }

                function getLocalApiDocsModelsData() {
                    return processApiDocsData(serviceData.localApiDocs);
                }

                function processApiDocsModels(itemApiDocs) {
                    if (itemApiDocs && itemApiDocs.swaggerVersion == '1.2') {
                        return processApiDocsV1Models(itemApiDocs);
                    } else if (itemApiDocs && itemApiDocs.swagger == '2.0') {
                        return processApiDocsV2Models(itemApiDocs);
                    }

                    return [];
                }

                function processApiDocsData(itemApiDocs) {
                    if (itemApiDocs && itemApiDocs.swaggerVersion == '1.2') {
                        return processApiDocsV1Data(itemApiDocs);
                    } else if (itemApiDocs && itemApiDocs.swagger == '2.0') {
                        return processApiDocsV2Data(itemApiDocs);
                    }

                    return [];
                }

                function processApiDocsV1Models(itemApiDocs) {
                    var processedApiDocsModels = [];
                    var apiEndpoints = itemApiDocs.apiEndpoints || [];

                    apiEndpoints.forEach(function (itemApiEndpoint) {
                        var apiDocsModels = itemApiEndpoint.models || {};
                        Object.keys(apiDocsModels).forEach(function (itemApiModelKey) {
                            processedApiDocsModels.push({
                                name: itemApiModelKey,
                                properties: Object.keys(apiDocsModels[itemApiModelKey].properties || {}).map(function (itemPropertyKey) {
                                    return angular.extend({
                                        name: itemPropertyKey
                                    }, itemApiEndpoint.models[itemApiModelKey].properties[itemPropertyKey])
                                })
                            })
                        });
                    });

                    return processedApiDocsModels.filter(function(itemModel) { // ignore DeferredResult generated by system
                        return itemModel.name.indexOf('DeferredResult') != 0;
                    });
                }

                function processApiDocsV2Models(itemApiDocs) {
                    var processedApiDocsModels = [];
                    var apiDocsModels = itemApiDocs.definitions || {};

                    Object.keys(apiDocsModels).forEach(function (itemApiModelKey) {
                        processedApiDocsModels.push({
                            name: itemApiModelKey,
                            properties: Object.keys(apiDocsModels[itemApiModelKey].properties || {}).map(function (itemPropertyKey) {
                                return angular.extend({
                                    name: itemPropertyKey
                                }, apiDocsModels[itemApiModelKey].properties[itemPropertyKey],
                                   apiDocsModels[itemApiModelKey].properties[itemPropertyKey].$ref ? {
                                       type: apiDocsModels[itemApiModelKey].properties[itemPropertyKey].$ref.split('/').pop()
                                   } : (apiDocsModels[itemApiModelKey].properties[itemPropertyKey].items && apiDocsModels[itemApiModelKey].properties[itemPropertyKey].items.$ref ? {
                                       items: {
                                           type: apiDocsModels[itemApiModelKey].properties[itemPropertyKey].items.$ref.split('/').pop()
                                       }
                                   } : {}))
                            })
                        })
                    });

                    return processedApiDocsModels.filter(function(itemModel) { // ignore DeferredResult generated by system
                        return itemModel.name.indexOf('DeferredResult') != 0;
                    });
                }

                function processApiDocsV1Data(itemApiDocs) {
                    if (!itemApiDocs.apis || !itemApiDocs.apis.length) {
                        return [];
                    }

                    var apiDocsdata = itemApiDocs.apis.map(function (itemApiDoc, index) {
                        var apiEndpoints = itemApiDocs.apiEndpoints[index];

                        return {
                            name: itemApiDoc.path.substring(itemApiDoc.path.lastIndexOf('/') + 1).replace('-controller', '').replace('controller', '').dashToCamelCase(),
                            basePath: apiEndpoints.basePath,
                            methods: apiEndpoints.apis.map(function (itemApiEndpoint) {
                                return {
                                    name: itemApiEndpoint.operations[0].nickname,
                                    path: itemApiEndpoint.path,
                                    method: itemApiEndpoint.operations[0].method,
                                    deprecated: itemApiEndpoint.operations[0].deprecated,
                                    type: itemApiEndpoint.operations[0].type,
                                    parameters: itemApiEndpoint.operations[0].parameters.map(function (itemParameter) {
                                        return angular.extend({
                                            name: itemParameter.name,
                                            paramType: itemParameter.paramType,
                                            type: itemParameter.type,
                                            required: itemParameter.required
                                        }, Object.keys(apiEndpoints.models || {}).indexOf(itemParameter.type) == -1 ? {} : { // populate class implementation
                                            typeModel: Object.keys(apiEndpoints.models[itemParameter.type].properties).map(function (itemParameterTypeKey) {
                                                return angular.extend({
                                                    name: itemParameterTypeKey
                                                }, apiEndpoints.models[itemParameter.type].properties[itemParameterTypeKey])
                                            })
                                        })
                                    })
                                }
                            })
                        }
                    });

                    return apiDocsdata.filter(function(itemController) { // ignore empty controllers
                        return itemController.methods.length > 0;
                    });
                }
                
                function processApiDocsV2Data(itemApiDocs) {
                    var methodsPaths = Object.keys(itemApiDocs.paths);
                    if (!methodsPaths.length) {
                        console.info('NO apis available');
                        return [];
                    }

                    itemApiDocs.tagsBuild = false;
                    if (!itemApiDocs.tags) {
                        itemApiDocs.tagsBuild = true;
                        itemApiDocs.tags = [];
                    }

                    var methods = [];
                    methodsPaths.forEach(function (itemMethodPath) {
                        Object.keys(itemApiDocs.paths[itemMethodPath]).forEach(function(iMethod) {
                            var methodInfo = itemApiDocs.paths[itemMethodPath][iMethod];
                            if (itemApiDocs.tagsBuild && methodInfo.tags) {
                                itemApiDocs.tags = itemApiDocs.tags.concat(methodInfo.tags);
                            }

                            methods.push({
                                name: methodInfo.operationId,
                                path: itemMethodPath,
                                method: iMethod.toUpperCase(),
                                // deprecated: ??,
                                type: (methodInfo.responses[200] && methodInfo.responses[200].schema && (methodInfo.responses[200].schema.type || methodInfo.responses[200].schema['$ref'].split('/').pop())) ||
                                    (methodInfo.responses[201] && methodInfo.responses[201].schema && (methodInfo.responses[201].schema.type || methodInfo.responses[201].schema['$ref'].split('/').pop())),
                                parameters: methodInfo.parameters && methodInfo.parameters.map(function (itemParameter) {
                                    return angular.extend({
                                        name: itemParameter.name,
                                        paramType: itemParameter.in,
                                        type: itemParameter.type,
                                        required: itemParameter.required
                                    }, Object.keys(itemApiDocs.definitions || {}).indexOf(itemParameter.type) == -1 ? {} : { // populate class implementation
                                        typeModel: Object.keys(itemApiDocs.definitions[itemParameter.type].properties).map(function (itemParameterTypeKey) {
                                            return angular.extend({
                                                name: itemParameterTypeKey
                                            }, apiEndpoints.models[itemParameter.type].properties[itemParameterTypeKey]);
                                        })
                                    });
                                }),
                                ctrls: methodInfo.tags
                            });
                        });
                    });

                    itemApiDocs.tags = itemApiDocs.tags.map(function(iItemApiTag) {
                        return (iItemApiTag.name || iItemApiTag).replace('-controller', '').replace('controller', '').dashToCamelCase();
                    }).removeDuplicates();

                    var apiDocsdata = itemApiDocs.tags.map(function(iItemApiTag) {
                        return {
                            name: iItemApiTag,
                            basePath: itemApiDocs.basePath,
                            methods: methods.filter(function(iItemMethod) { // get methods for selected controller
                                return iItemMethod.ctrls.filter(function(iItemMethodCtrl) {
                                    return iItemMethodCtrl.replace('-controller', '').replace('controller', '').dashToCamelCase() == iItemApiTag;
                                })[0];
                            })
                        };
                    });

                    return apiDocsdata.filter(function(itemController) { // ignore empty controllers
                        return itemController.methods.length > 0;
                    });
                }
            }]);
})();

String.prototype.dashToCamelCase = function () {
    return (this.charAt(0).toLowerCase() + this.slice(1)).replace(/(\-[a-z])/g, function ($1) {
        return $1.toUpperCase().replace('-', '');
    });
};

String.prototype.capitalizeFirstLetter = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};

Array.prototype.removeDuplicates = function() {
    return this.reduce(function(accum, current) {
        if (accum.indexOf(current) == -1) {
            accum.push(current);
        }

        return accum;
    }, []);
};
